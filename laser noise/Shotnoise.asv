addpath('..\..\..\AO--commons\shared functions folder');
addpath('..\..\..\AO--commons\common subfunctions');

%%
clearvars :
% generate poissoninan statistics on laser using "real" parameters:

param = (1:0.1:10)*1e-3 ;

for loop = 1:length(param)

P           = param(loop) ;       % power in W
lambda0     = 800e-9;      % m
c           = 3e8;         % m/s
nu          = c/lambda0;   % Hz
h           = 6.626*1e-34; % J.s
Ephoton     = h*nu ;       % J
eta         = 1 ;


% sampling of the pulse : integration time for each point = T


Fs = 1e6 ; % sampling frequency
T = 1/Fs ; % (condition for Df T = 1)

% generation of random trace 

% Fourier structure : 
N = 2^11 ;       % number of point for FFT
F = TF_t(N,Fs) ; % Fourier time structure


I = (P/Ephoton)*T + F.t*0 ; % unit = Number of photon
I_FFT = F.fourier(I) ; 

eta = 0.1e3 ;
Lindewidth = 2*eta./(F.f.^2 + (eta)^2).*exp(1i*2*pi*rand(1,F.N));
I = abs(F.ifourier(Lindewidth)) ; 
I = (P/Ephoton)*T*I/mean(I) ; % renormalize on average power 

 

% renormalize
trapz(F.f,abs(I_FFT).^2)
trapz(F.t,abs(I).^2)


 I = PoissonNoise(I) ; 
 I = I*Ephoton/T ;

% figure(2);clf; plot(F.t,abs(I)); 
% xlabel('time')


% add classical noise


% measurement of the variance od power
% var(I,1)
% sigmaP2 = (Ephoton/T)*P


% figure(3);clf; plot(F.f*1e-3,abs(I_FFT))
% xlabel('kHz')
%% plot the signal as a function of time

figure(2); hold on
% subplot(211)
% plot(F.t*1e3,I*1e3,'o-')
% % ylim([0 2])
% xlabel('time(ms)')
% ylabel('power(mW)')
% 
% % psd in [unit]/sqrt(Hz)
% 
 [f_psd,PowerSpectDens] = F.psd(I-mean(I)) ;
% 
% trapz(f_psd,PowerSpectDens)



% subplot(212) ;
loglog( f_psd(2:end)*1E-3 , 10*log10(sqrt(PowerSpectDens(2:end))) ,'o-') ; hold on
loglog( f_psd(2:end)*1E-3, 10*log10(sqrt(2*Ephoton*P)) + 0*f_psd(2:end) , 'red') ; 
ylabel('dB [$W/\sqrt{Hz}]$',Interpreter='latex')
xlabel('frequency (kHz)')
ylim([-120 -70])
set(findall(gcf,'-property','FontSize'),'FontSize',20)
grid on

%% generate for no noise laser beam : 
% 
% figure(2); clf ;
% for loop = 1:length(I)
% figure(2); hold on
% plot((F.t(loop)-min(F.t))*1e3,I(loop)*1e3,'o-','color',[0.85,0.33,0.10]) 
% % ylim([0.997 1.005])
% xlabel('time(ms)')
% ylabel('power(mW)')
% set(findall(gcf,'-property','FontSize'),'FontSize',15)
% drawnow 
% saveas(gcf,['D:\saving folder\',sprintf('Shotnoise%d.png',loop)])
% end
% 

% Integration of the noise : 
I1 = min(find(f_psd >= 90*1e3)) ;
I2 = min(find(f_psd >= 300*1e3)) ;

LowNoise(loop) =  trapz( f_psd((2:I1)) , PowerSpectDens(2:I1) ) ;
HighNoise(loop) = trapz( f_psd((I2:end)) , PowerSpectDens(I2:end) ) ; 
AllNoise(loop) = trapz( f_psd((2:end)) , PowerSpectDens(I2:end) ) ; 

end

figure(3); clf ; 
plot(param*1e3,10*log10(LowNoise)) ; hold on ; 
plot(param*1e3,10*log10(HighNoise)) ;
xlabel('Power(mW)')
ylabel('dB [$W/\sqrt{Hz}]$',Interpreter='latex')











